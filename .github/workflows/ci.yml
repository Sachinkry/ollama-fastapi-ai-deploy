name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run tests
        run: PYTHONPATH=. pytest

  test-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm install

      - name: Lint frontend
        working-directory: ./frontend
        run: npm run lint

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

  integration-test:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build and run Docker Compose
        run: docker-compose up -d --build

      - name: Health Check
        # Give services time to start up. In a real-world scenario, 
        # you might use a more robust tool like docker-compose-wait.
        run: |
          sleep 15
          echo "Pinging backend health check..."
          curl -f http://localhost:8000/healthz
          echo "Pinging frontend..."
          curl -f http://localhost:8080

      - name: Run Live API Test
        run: |
          echo "Testing /models endpoint..."
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/models)
          if [ "$response" -ne 200 ]; then
            echo "/models endpoint failed with status $response"
            exit 1
          fi
          echo "/models endpoint is responding correctly."

      - name: View logs on failure
        if: failure()
        run: docker-compose logs

      - name: Tear down services
        if: always()
        run: docker-compose down
