name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run tests
        run: PYTHONPATH=. pytest

  test-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm install

      - name: Lint frontend
        working-directory: ./frontend
        run: npm run lint

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

  integration-test:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build and run Docker Compose
        run: docker compose up -d --build

      - name: Health Check
        # Give services time to start up. In a real-world scenario, 
        # you might use a more robust tool like docker-compose-wait.
        run: |
          sleep 15
          echo "Pinging backend health check..."
          curl -f http://localhost:8000/healthz
          echo "Pinging frontend..."
          curl -f http://localhost:8080

      - name: Run End-to-End Test
        env:
          API_KEY: ${{ secrets.API_KEY }}
        run: |
          echo "Starting end-to-end test for /generate endpoint..."
          
          # Step 1: Enqueue the job and capture response
          echo "Submitting generation job..."
          HTTP_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST -H "Content-Type: application/json" -H "x-api-key: $API_KEY" -d '{"model":"qwen3:0.6b","prompt":"a haiku about CI/CD"}' http://localhost:8080/generate)
          HTTP_STATUS=$(echo "$HTTP_RESPONSE" | tail -n1)
          HTTP_BODY=$(echo "$HTTP_RESPONSE" | sed '$d')

          echo "Response Body: $HTTP_BODY"
          echo "Response Status: $HTTP_STATUS"

          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "/generate endpoint failed with status $HTTP_STATUS"
            exit 1
          fi

          JOB_ID=$(echo $HTTP_BODY | jq -r '.job_id')

          if [ -z "$JOB_ID" ] || [ "$JOB_ID" == "null" ]; then
            echo "Failed to get a valid job_id from response!"
            exit 1
          fi
          echo "Job submitted with ID: $JOB_ID"

          # Step 2: Poll for completion
          echo "Polling for job completion..."
          for i in {1..12}; do
            STATUS_RESPONSE=$(curl -s http://localhost:8080/status/$JOB_ID)
            JOB_STATUS=$(echo $STATUS_RESPONSE | jq -r '.status')
            echo "Current job status: $JOB_STATUS"

            if [ "$JOB_STATUS" == "completed" ]; then
              echo "Job completed successfully!"
              RESULT_TEXT=$(echo $STATUS_RESPONSE | jq -r '.result.text')
              echo "Result: $RESULT_TEXT"
              exit 0
            fi

            if [ "$JOB_STATUS" == "failed" ]; then
              echo "Job failed!"
              echo "Response: $STATUS_RESPONSE"
              exit 1
            fi
            sleep 5
          done

          echo "Job did not complete in time!"
          exit 1

      - name: View logs on failure
        if: failure()
        run: docker compose logs

      - name: Tear down services
        if: always()
        run: docker compose down
